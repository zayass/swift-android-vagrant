diff --git a/CoreFoundation/Base.subproj/CFInternal.h b/CoreFoundation/Base.subproj/CFInternal.h
index a716f90..474d953 100644
--- a/CoreFoundation/Base.subproj/CFInternal.h
+++ b/CoreFoundation/Base.subproj/CFInternal.h
@@ -334,6 +334,16 @@ CF_PRIVATE Boolean __CFProcessIsRestricted();
 #define STACK_BUFFER_DECL(T, N, C) T N[C]
 #endif
 
+#ifdef __ANDROID__
+// Avoids crashes on Android
+// https://bugs.swift.org/browse/SR-2587
+// https://bugs.swift.org/browse/SR-2588
+// Seemed to be a linker/relocation? problem.
+// CFStrings using CONST_STRING_DECL() were not working
+// Applies reference to _NSCFConstantString's isa here
+// rather than using a linker option to create an alias.
+#define __CFConstantStringClassReference _TMC10Foundation19_NSCFConstantString
+#endif
 
 CF_EXPORT void * __CFConstantStringClassReferencePtr;
 
diff --git a/CoreFoundation/Base.subproj/CFRuntime.c b/CoreFoundation/Base.subproj/CFRuntime.c
index 2672704..2ce6270 100644
--- a/CoreFoundation/Base.subproj/CFRuntime.c
+++ b/CoreFoundation/Base.subproj/CFRuntime.c
@@ -741,6 +741,7 @@ Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2) {
     if (NULL == cf1) { CRSetCrashLogMessage("*** CFEqual() called with NULL first argument ***"); HALT; }
     if (NULL == cf2) { CRSetCrashLogMessage("*** CFEqual() called with NULL second argument ***"); HALT; }
     if (cf1 == cf2) return true;
+
     CFTYPE_OBJC_FUNCDISPATCH1(Boolean, cf1, isEqual:, cf2);
     CFTYPE_OBJC_FUNCDISPATCH1(Boolean, cf2, isEqual:, cf1);
     CFTYPE_SWIFT_FUNCDISPATCH1(Boolean, cf1, NSObject.isEqual, (CFSwiftRef)cf2);
diff --git a/CoreFoundation/Base.subproj/SwiftRuntime/CoreFoundation.h b/CoreFoundation/Base.subproj/SwiftRuntime/CoreFoundation.h
index 99c4d6d..d02e6fe 100644
--- a/CoreFoundation/Base.subproj/SwiftRuntime/CoreFoundation.h
+++ b/CoreFoundation/Base.subproj/SwiftRuntime/CoreFoundation.h
@@ -43,7 +43,7 @@
 #include <netdb.h> // for NSHost.swift
 #endif
 
-#if __has_include(<ifaddrs.h>)
+#if __has_include(<ifaddrs.h>) && !defined(__ANDROID__)
 #include <ifaddrs.h> // for NSHost.swift
 #endif
 
diff --git a/Foundation/NSDecimal.swift b/Foundation/NSDecimal.swift
index 16f746e..d76af03 100644
--- a/Foundation/NSDecimal.swift
+++ b/Foundation/NSDecimal.swift
@@ -68,7 +68,7 @@ public struct Decimal {
         set {
             __lengthAndFlags =
                 (__lengthAndFlags & 0b0011_1111) |
-                UInt8(UInt32(newValue & (0b11 << 16)) >> 10)
+                UInt8(UInt32(newValue & (UInt32(0b11) << UInt32(16))) >> 10)
             __reserved = UInt16(newValue & 0b1111_1111_1111_1111)
         }
     }
diff --git a/Foundation/NSHost.swift b/Foundation/NSHost.swift
index 3c09f7c..8a5e945 100644
--- a/Foundation/NSHost.swift
+++ b/Foundation/NSHost.swift
@@ -65,6 +65,7 @@ open class Host: NSObject {
     }
     
     internal func _resolveCurrent() {
+        #if !os(Android)
         var ifaddr: UnsafeMutablePointer<ifaddrs>? = nil
         if getifaddrs(&ifaddr) != 0 {
             return
@@ -88,6 +89,7 @@ open class Host: NSObject {
             }
             ifa = ifaValue.ifa_next
         }
+        #endif
     }
     
     internal func _resolve() {
@@ -138,7 +140,7 @@ open class Host: NSObject {
                 }
                 let sa_len: socklen_t = socklen_t((family == AF_INET6) ? MemoryLayout<sockaddr_in6>.size : MemoryLayout<sockaddr_in>.size)
                 let lookupInfo = { (content: inout [String], flags: Int32) in
-                    if getnameinfo(info.ai_addr, sa_len, host, socklen_t(NI_MAXHOST), nil, 0, flags) == 0 {
+                    if getnameinfo(info.ai_addr, sa_len, host, Int(socklen_t(NI_MAXHOST)), nil, 0, flags) == 0 {
                         content.append(String(cString: host))
                     }
                 }
