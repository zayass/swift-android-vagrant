diff --git a/dispatch/dispatch.h b/dispatch/dispatch.h
index 585940c..8851b83 100644
--- a/dispatch/dispatch.h
+++ b/dispatch/dispatch.h
@@ -64,7 +64,9 @@
 #define __DISPATCH_INDIRECT__
 #endif
 
+#if __has_include(<os/object.h>)
 #include <os/object.h>
+#endif
 #include <dispatch/base.h>
 #include <dispatch/time.h>
 #include <dispatch/object.h>
diff --git a/src/shims/linux_stubs.h b/src/shims/linux_stubs.h
index ec68417..c540f04 100644
--- a/src/shims/linux_stubs.h
+++ b/src/shims/linux_stubs.h
@@ -22,11 +22,9 @@
 		(var) && ((temp) = TAILQ_NEXT((var), field), 1); (var) = (temp))
 #endif
 
-#if DISPATCH_DEBUG
 #ifndef TRASHIT
 #define TRASHIT(x) do { (x) = (void *)-1; } while (0)
 #endif
-#endif
 
 /*
  * Stub out defines for some mach types and related macros
diff --git a/src/shims/lock.h b/src/shims/lock.h
index a22517e..69e938c 100644
--- a/src/shims/lock.h
+++ b/src/shims/lock.h
@@ -89,7 +89,7 @@ _dispatch_lock_has_failed_trylock(dispatch_lock lock_value)
 
 #elif defined(__linux__)
 #include <linux/futex.h>
-#if !defined(__x86_64__) && !defined(__i386__)
+#if !defined(__x86_64__) && !defined(__i386__) && !defined(__ANDROID__)
 #include <linux/membarrier.h>
 #endif
 #include <unistd.h>
@@ -546,9 +546,13 @@ _dispatch_once_xchg_done(dispatch_once_t *pred)
 	// On Intel, any load is a load-acquire, so we don't need to be fancy
 	return os_atomic_xchg(pred, DLOCK_ONCE_DONE, release);
 #elif defined(__linux__)
+#if defined(__ANDROID__)
+	os_atomic_thread_fence(seq_cst);
+#else
 	if (unlikely(syscall(__NR_membarrier, MEMBARRIER_CMD_SHARED, 0) < 0)) {
 		DISPATCH_INTERNAL_CRASH(errno, "sys_membarrier not supported");
 	}
+#endif
 	return os_atomic_xchg(pred, DLOCK_ONCE_DONE, relaxed);
 #else
 #  error dispatch_once algorithm not available for this port
